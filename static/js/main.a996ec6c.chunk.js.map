{"version":3,"sources":["components/CountryPicker/index.js","components/DateHeader/index.js","components/Table/index.js","components/GlobalStats/index.js","components/DetailTable/index.js","components/CountryDetail/index.js","components/AllTable/index.js","components/AllCountries/index.js","components/SearchBox/index.js","components/Header/index.js","helpers/requests.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","countries","handleCountry","countriesOptions","map","country","index","value","Country","key","onChange","event","target","defaultValue","disabled","DateHeader","d","Date","now","Intl","DateTimeFormat","year","month","day","formatToParts","mo","da","ye","formattedDate","Table","data","start","end","NewConfirmed","duration","separator","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","GlobalStats","DetailTable","className","toLocaleString","CountryDetail","AllTable","useState","sortedCountries","setSortedCountries","deathRateHigh","setDeathRateHigh","confirmRateHigh","setConfirmRateHigh","alphabeticalSorted","setAlphabeticalSorted","dailyDeath","setDailyDeath","showSort","setShowSort","rearrangeList","level","Promise","sorted","sort","a","b","localeCompare","then","tableRows","array","onClick","handleClick","AllCountries","SearchBox","onSearch","placeholder","onKeyUp","Header","fetchData","axios","get","response","App","setData","selectedCountry","setSelectedCountry","allCountries","setAllCountries","filteredCountries","setFilteredCountries","getAllCountries","prev","useEffect","res","Countries","fetchInfo","Global","countryName","foundCountry","find","letter","filter","toLowerCase","search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a996ec6c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CountryPicker({ countries, handleCountry }) {\n  if (!countries) return \"Loading...\";\n\n  const countriesOptions = countries.map((country, index) => {\n    return (\n      <option value={country.Country} key={index}>\n        {country.Country}\n      </option>\n    );\n  });\n\n  const handleSelect = (event) => {\n    handleCountry(event.target.value);\n  };\n  return (\n    <>\n      <h1>Country Picker</h1>\n      <select onChange={handleSelect} defaultValue=\"DEFAULT\">\n        <option value=\"DEFAULT\" disabled>\n          Choose a country...\n        </option>\n        {countriesOptions}\n      </select>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function DateHeader() {\n  const d = Date.now();\n  const dtf = new Intl.DateTimeFormat(\"en\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n  });\n  const [{ value: mo }, , { value: da }, , { value: ye }] = dtf.formatToParts(\n    d\n  );\n\n  const formattedDate = `${da}-${mo}-${ye}`;\n\n  return <h5>{formattedDate}</h5>;\n}\n","import React from \"react\";\nimport CountUp from \"react-countup\";\n\nexport default function Table({ data }) {\n  return (\n    <>\n      <table>\n        <tbody>\n          <tr>\n            <th>New Confirmed</th>\n            <th>New Deaths</th>\n            <th>New Recovered</th>\n            <th>Total Confirmed</th>\n            <th>Total Deaths</th>\n            <th>Total Recovered</th>\n          </tr>\n          <tr>\n            <td>\n              <CountUp\n                start={0}\n                end={data.NewConfirmed}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n            <td>\n              <CountUp\n                start={0}\n                end={data.NewDeaths}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n            <td>\n              <CountUp\n                start={0}\n                end={data.NewRecovered}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n            <td>\n              <CountUp\n                start={0}\n                end={data.TotalConfirmed}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n            <td>\n              <CountUp\n                start={0}\n                end={data.TotalDeaths}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n            <td>\n              <CountUp\n                start={0}\n                end={data.TotalRecovered}\n                duration={1.5}\n                separator={\",\"}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import React from \"react\";\nimport DateHeader from \"../DateHeader\";\nimport Table from \"../Table\";\n\nexport default function GlobalStats({ data }) {\n  if (!data) return null;\n\n  return (\n    <>\n      <h1>Global Stats</h1>\n      <DateHeader />\n      <Table data={data} />\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./DetailTable.css\";\n\nexport default function DetailTable({\n  data: {\n    Country,\n    NewConfirmed,\n    NewDeaths,\n    NewRecovered,\n    TotalConfirmed,\n    TotalDeaths,\n    TotalRecovered,\n  },\n}) {\n  if (!Country)\n    return (\n      <table className=\"hideTable\">\n        <tbody>\n          <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n            <th></th>\n          </tr>\n          <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  return (\n    <div className=\"showTable\">\n      <table>\n        <tbody>\n          <tr>\n            <th>Country</th>\n            <th>New Confirmed</th>\n            <th>New Deaths</th>\n            <th>New Recovered</th>\n            <th>Total Confirmed</th>\n            <th>Total Deaths</th>\n            <th>Total Recovered</th>\n          </tr>\n          <tr>\n            <td>{Country.toLocaleString()}</td>\n            <td>{NewConfirmed.toLocaleString()}</td>\n            <td>{NewDeaths.toLocaleString()}</td>\n            <td>{NewRecovered.toLocaleString()}</td>\n            <td>{TotalConfirmed.toLocaleString()}</td>\n            <td>{TotalDeaths.toLocaleString()}</td>\n            <td>{TotalRecovered.toLocaleString()}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React from \"react\";\nimport DetailTable from \"../DetailTable\";\n\nexport default function CountryDetail({ country }) {\n  return <DetailTable data={country} />;\n}\n","import React, { useState } from \"react\";\nimport \"./AllTable.css\";\n\nexport default function AllTable({ countries, handleCountry }) {\n  const [sortedCountries, setSortedCountries] = useState(countries);\n  const [deathRateHigh, setDeathRateHigh] = useState(true);\n  const [confirmRateHigh, setConfirmRateHigh] = useState(true);\n  const [alphabeticalSorted, setAlphabeticalSorted] = useState(true);\n  const [dailyDeath, setDailyDeath] = useState(true);\n  const [showSort, setShowSort] = useState(false);\n\n  const rearrangeList = (level) => {\n    function sortArray() {\n      const sorted = [...countries].sort((a, b) => {\n        if (level === \"highDeath\") {\n          setDeathRateHigh(false);\n          return b.TotalDeaths - a.TotalDeaths;\n        }\n        if (level === \"lowDeath\") {\n          setDeathRateHigh(true);\n          return a.TotalDeaths - b.TotalDeaths;\n        }\n        if (level === \"highConfirm\") {\n          setConfirmRateHigh(false);\n          return b.TotalConfirmed - a.TotalConfirmed;\n        }\n        if (level === \"lowConfirm\") {\n          setConfirmRateHigh(true);\n          return a.TotalConfirmed - b.TotalConfirmed;\n        }\n        if (level === \"highDaily\") {\n          setDailyDeath(false);\n          return b.NewDeaths - a.NewDeaths;\n        }\n        if (level === \"lowDaily\") {\n          setDailyDeath(true);\n          return a.NewDeaths - b.NewDeaths;\n        }\n        if (level === \"alphaOrder\") {\n          setAlphabeticalSorted(false);\n          return a.Country.localeCompare(b.Country);\n        }\n        if (level === \"nonAlphaOrder\") {\n          setAlphabeticalSorted(true);\n          return b.Country.localeCompare(a.Country);\n        } else {\n          return null;\n        }\n      });\n      return setSortedCountries(sorted);\n    }\n    return new Promise(sortArray).then(setShowSort(true));\n  };\n\n  const handleClick = (country) => {\n    handleCountry(country);\n  };\n\n  const tableRows = (array) =>\n    array.map((country, index) => {\n      return (\n        <tr\n          key={index}\n          onClick={() => handleClick(country)}\n          className=\"table-row\"\n        >\n          <td>{country.Country.toLocaleString()} </td>\n          <td>{country.TotalConfirmed.toLocaleString()}</td>\n          <td>{country.TotalDeaths.toLocaleString()}</td>\n          <td>{country.NewDeaths.toLocaleString()}</td>\n        </tr>\n      );\n    });\n  if (!countries) return null;\n  return (\n    <>\n      <table className=\"all-table-container\">\n        <tbody className=\"all-table\">\n          <tr>\n            {alphabeticalSorted ? (\n              <th onClick={() => rearrangeList(\"alphaOrder\")}>Country ▽</th>\n            ) : (\n              <th onClick={() => rearrangeList(\"nonAlphaOrder\")}>Country △</th>\n            )}\n            {confirmRateHigh ? (\n              <th onClick={() => rearrangeList(\"highConfirm\")}>\n                Total Confirmed △\n              </th>\n            ) : (\n              <th onClick={() => rearrangeList(\"lowConfirm\")}>\n                Total Confirmed ▽\n              </th>\n            )}\n            {deathRateHigh ? (\n              <th onClick={() => rearrangeList(\"highDeath\")}>Total Deaths △</th>\n            ) : (\n              <th onClick={() => rearrangeList(\"lowDeath\")}>Total Deaths ▽</th>\n            )}\n            {dailyDeath ? (\n              <th onClick={() => rearrangeList(\"highDaily\")}>Daily Death △</th>\n            ) : (\n              <th onClick={() => rearrangeList(\"lowDaily\")}>Daily Death ▽</th>\n            )}\n          </tr>\n          {showSort ? tableRows(sortedCountries) : tableRows(countries)}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import React from \"react\";\nimport AllTable from \"../AllTable\";\n\nexport default function AllCountries({ countries, handleCountry }) {\n  return <AllTable countries={countries} handleCountry={handleCountry} />;\n}\n","import React from \"react\";\n\nexport default function SearchBox({ onSearch }) {\n  function handleSearch(event) {\n    onSearch(event.target.value);\n  }\n\n  return <input placeholder=\"Search...\" onKeyUp={handleSearch} />;\n}\n","import React from \"react\";\n\nexport default function Header() {\n  return <h1>Covid-19 Tracker</h1>;\n}\n","import axios from \"axios\";\n\nconst url = \"https://api.covid19api.com/summary\";\nexport const fetchData = async () => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport CountryPicker from \"./components/CountryPicker\";\nimport GlobalStats from \"./components/GlobalStats\";\nimport CountryDetail from \"./components/CountryDetail\";\nimport AllCountries from \"./components/AllCountries\";\nimport SearchBox from \"./components/SearchBox\";\nimport Header from \"./components/Header\";\nimport { fetchData } from \"./helpers/requests\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [selectedCountry, setSelectedCountry] = useState({});\n  const [allCountries, setAllCountries] = useState([]);\n  const [filteredCountries, setFilteredCountries] = useState([]);\n\n  useEffect(() => {\n    async function fetchInfo() {\n      await fetchData().then(function (res) {\n        setData(res.data);\n        getAllCountries(res.data.Countries);\n      });\n    }\n    fetchInfo();\n  }, []);\n\n  const handleCountrySelect = (countryName) => {\n    const foundCountry = data.Countries.find((country) => {\n      return country.Country === countryName;\n    });\n    setSelectedCountry(foundCountry);\n  };\n\n  const handleFullCountry = (country) => {\n    setSelectedCountry(country);\n  };\n\n  function getAllCountries(allCountries) {\n    return allCountries.map(function (country) {\n      setFilteredCountries((prev) => [...prev, country]);\n      return setAllCountries((prev) => [...prev, country]);\n    });\n  }\n\n  function onSearch(letter) {\n    setFilteredCountries(\n      allCountries.filter((country) => {\n        return country.Country.toLowerCase().search(letter) !== -1;\n      })\n    );\n  }\n  return (\n    <div className=\"App\">\n      <Header />\n      {data ? (\n        <>\n          <GlobalStats data={data.Global} />\n          <CountryPicker\n            countries={data.Countries}\n            handleCountry={handleCountrySelect}\n          />\n          <SearchBox onSearch={onSearch} />\n          <CountryDetail country={selectedCountry} />\n\n          <AllCountries\n            countries={filteredCountries}\n            handleCountry={handleFullCountry}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}